{
  "Hello IFC.js!": {},
  "Open BIM has come to the browser to stay.": {},
  "industry": {},
  "community": {},
  "project": {},
  "Who we are and why we do this.": {},
  "<img src={require(\"@site/static/img/blog/2021-07-17/Lukas.jpg\").default} alt=\"PC image\"></img>": {},
  "You may have heard about IFC.js in recent months. If you are not familiar with the world of software development and BIM, you may be wondering what it is all about.": {},
  "🏠 BIM (Building Information Modelling) is the new way of working in the construction industry. Instead of drawing plans, three-dimensional models containing the geometry of the building and its information are used. It is very similar to the buildings in <a href=\"https://www.ea.com/games/the-sims\">The SIMS</a>; it saves a lot of money and allows teams to work more efficiently.": {},
  "💸 However, there is a problem: developing BIM applications is not accesible to everyone, mainly because the necessary technology (IFC) is very expensive to implement. This means that until now only a small group of large commercial software houses have had access to the BIM ecosystem.": {},
  "We believe it's not fair. And not only is this not fair to developers who are left out of the market, but it is not fair to customers, who are victims of the predatory pricing of an oligopolistic market. That is why this project exists.": {},
  "🤝 Our goal is to enable anyone to create BIM applications.": {},
  "Who are we? A group of developers who want to improve the construction industry in their spare time. The project started in 2021 with <a href=\"https://github.com/tomvandig\">Tom</a>, <a href=\"https://github.com/harrycollin\">Harry</a> and me and has been growing ever since, with more and more people and companies willing to change the situation in the sector and commit to a real open BIM.": {},
  "🚀 It doesn't matter if you are a developer, architect, engineer or something else. If you too want to improve the industry, <a href=\"https://discord.gg/FXfyR4XrKT\">join us</a> and help us make a difference.": {},
  "The BIM that we need": {},
  "The price of an oligopoly.": {},
  "software": {},
  "Sometimes the only way to get what you need is to do it yourself.": {},
  "<img src={require(\"@site/static/img/blog/2021-07-27/prometheus.jpeg\").default} alt=\"PC image\"></img>": {},
  "Software is becoming more and more necessary in our work; if you are involved in BIM, you know this well.": {},
  "🤯 In addition to BIM architect, I am also a programmer. I decided to try out a new programming tool: <a href=\"https://www.jetbrains.com/webstorm/\">WebStorm by JetBrains</a>. My surprise was to discover its price: around 100 euros/license year.": {},
  "💰 In contrast, some of the most popular BIM tools cost around 2500 euros/license year. On top of that, they use proprietary formats, which means that the day you decide to stop using them, you lose access to all your work.": {},
  "👨‍💼👨‍💼👨‍💼 This is what happens when only a few have access to a resource that we all need; in this case, that resource is the ability to create BIM software. We can write all the <a href=\"https://gfxspeak.com/2020/08/04/architects-demand-autodesk/\">letters of complaint</a> we want, but the fact is that these software houses will keep doing what they do as long as we keep paying them.": {},
  "💸 Some BIM tools are around 25 times more expensive than software development tools.": {},
  "💪 But that can change. Now, for the first time, we have the opportunity to bring BIM back to the industry. A BIM that is affordable, effective and that suits our needs: a BIM made by us and for us.": {},
  "🤝 Maybe you think it's a bit utopian to think that we can stand up to the big commercial BIM houses with open source. However, don't forget that we are the source of money that keeps those big companies alive, and initiatives like <a href=\"https://ifcjs.github.io/info/\">IFC.js</a>, <a href=\"https://speckle.systems/\">Speckle</a>, <a href=\"https://blenderbim.org/\">BlenderBIM</a> and <a href=\"https://osarch.org/\">OSArch</a> keep growing every day.": {},
  "🚀 At the end of the day, you can keep wishing for a better industry while letting big companies take your money, or you can <a href=\"https://discord.gg/FXfyR4XrKT\">contribute</a> to create it. Sometimes, the only way to get what you need is to do it yourself.": {},
  "Build a CDE in 30 minutes": {},
  "Make you own CDE from scratch!": {},
  "tutorial": {},
  "CDE": {},
  "Google": {},
  "All the big companies are selling their CDE. Why don't YOU make your own CDE?": {},
  "<img src={require(\"@site/static/img/blog/2021-09-27/lego.jpg\").default} alt=\"Lego image\"></img>": {},
  "## But wait, what is a CDE?": {},
  "📦 Informally speaking, CDE is nothing more than a place where the information of a construction project is centralised and accesible through internet.": {},
  "🔧🔨 CDEs can have all the functionalities of traditional BIM applications: 3D viewers, reading and editing data, energy simulations, automatic measurements and budgets, etc.": {},
  "🌎🌍🌏 However, they have a fundamental advantage: they are on the web, and that means they are accessible from anywhere and from any device without having to install anything.": {},
  "## Ok, but why would I want a CDE?": {},
  "💸 Well, the truth is that right now, CDEs are the new black. Almost every major company in the industry is building a CDE and selling them to their customers at exorbitant prices.": {},
  "🏃‍♀️🏃‍♂️🏃‍♀️ With internet getting faster and better, there will come a day when desktop applications as we know them will lose relevance, and a large part of our tasks will be performed in web applications or server applications. In other words, CDEs are the future, and right now there is a big race to build the best one.": {},
  "## I get it, CDEs rock. But I will never be able to develop one myself": {},
  "👩‍🏫 Wrong! The biggest beneficiary of you thinking you can't do BIM solutions is the current BIM vendors. At IFC.js we wanted to bust that myth and make a simple CDE from scratch to show that starting to develop BIM applications is not that difficult.": {},
  "☝ Obviously, this tutorial is a minimal example. But from the simple CDE of this tutorial to the CDEs of large companies, there is not as much distance as it might seem. Enough chit-chat, let's get on with it!": {},
  "## CDE design": {},
  "### Strategy": {},
  "⏳ We only have half an hour to do this CDE, so we have to choose carefully how to do it in order not to waste any time. First things first: we need a place to store project documentation. Do you know of an existing tool that allows us to do that? We have thought of Google Drive!": {},
  "💪 Google Drive has a lot of power: we can control read and write access to files, version control, an open API... In short, it has many of the things that BIM software companies charge you for, but totally free.": {},
  "🛑 However, Google Drive has a fundamental limitation: it does not have a 3D viewer and does not allow easy access to data in BIM models (e.g. IFC models).": {},
  "🤝 This is where IFC.js comes in, allowing us to build BIM applications directly on the web. Combining the storage and permissions power of google drive with the 3d and data reading and editing capabilities of IFC.js, we could build our basic CDE in 30 minutes. Here's how:": {},
  "### Architecture": {},
  "🤷‍♀️ How to connect IFC.js and google drive to be able to use both as a CDE? Our design proposal is as follows. It may look complicated, but it's actually very very simple.": {},
  "<img src={require(\"@site/static/img/blog/2021-09-27/schema.jpg\").default} alt=\"Schema explaining the concept of the CDE\"></img>": {},
  "🏠 First we are going to create an 3D BIM web application that is able to download files from google drive. Specifically, it will download the file from google drive whose ID it finds in its URL parameter. For example, if your URL is <code>https://.../?id=123\\&name=TEST.ifc</code>, it will download the file whose <code>ID</code> is <code>123</code> from the google account of the user who is logged into the app.": {},
  "🌐 Then we are going to create a <a href=\"https://developer.chrome.com/docs/extensions/\">google chrome extension</a> that is going to do three things:": {},
  "Read the name of the HTML element that the user clicks on via web scraping.": {},
  "Find out the ID of that element using the google drive API.": {},
  "Create a menu that allows the user to open the URL with the IFC.js web application. In addition, you are going to add two url parameters: the name and the id of the file.": {},
  "In short: a google chrome extension gets the name of a file when the user clicks on it and opens a web app that knows how to download files by their ID. That's all.": {},
  "### IFC.js app": {},
  "#### BIM app": {},
  "🏢 Thanks to IFC.js, this is the easiest part. Specifically, we are going to create it with <a href=\"https://github.com/IFCjs/web-ifc-viewer\">web-ifc-viewer</a>, which allows to make BIM applications in 50 lines of code. You can find all the code <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer/google-drive-viewer\">here</a>.": {},
  "😉 Yes, you read that right: a full 3D BIM app in 50 lines. And it includes functionalities such as section drawings and 3D dimensions.": {},
  "🎨 Make sure you create the necessary HTML and CSS to give the viewer the look and feel you want.": {},
  "#### Google Drive API": {},
  "🔒🔒🔒 Well, we have a BIM viewer, but for now it can't download anything from the Google Drive API. However, that's easy: just follow these steps from the <a href=\"https://developers.google.com/drive/api/v3/quickstart/js\">official documentation</a> and copy and paste the JavaScript code to be able to access the API.": {},
  "🔑🔑🔑 Following the google guide, you'll need to create a new Google Cloud project to get your own CLIENT_ID and API_KEY; they are just two texts that you must have for google to know who you are. In other words, you can't use the keys we have to access to your drive!": {},
  "📋 If you take a look at the code we have posted, you will see that we have copied and pasted almost all of the code from the <a href=\"https://developers.google.com/drive/api/v3/quickstart/js\">google example</a>. The only thing we have added is the following, which simply gets the ID of the file from the URL of the web application and downloads it from google drive:": {},
  "🎉🎉 Congratulations! You have just built a BIM application capable of downloading files from Google Drive. Now all that remains is the last part: creating the Google Chrome extension.": {},
  "### Chrome extension": {},
  "Now we are going to make a Google Chrome extension so that the user can select the files they want to open. If you've never done this before, it may sound intimidating, but it's actually very simple. You can find the finished result <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/extensions/Drive-CDE\">here</a>.": {},
  "🔑🔑🔑 Following the google guide, you'll need to create a new Google Cloud project to get your own CLIENT\\_ID and API\\_KEY; they are just two texts that you must have for google to know who you are. In other words, you can't use the keys we have to access to your drive! <a href=\"https://developers.google.com/drive/api/v3/about-sdk#create_and_open_files_directly_from_the_drive_ui\">Have a look here for more details</a>.": {},
  "️": {},
  "👣 There are many <a href=\"https://dev.to/anobjectisa/how-to-build-a-chrome-extension-new-manifest-v3-5edk\">step-by-step guides</a> on the internet, but we recommend that you take the code from our repository, study it and play with it to see how it works.": {},
  "🧱 There are really only 2 important files:": {},
  "<a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/extensions/Drive-CDE/background.js\">background.js</a>: controls the events of the page, like when the user clicks on something, but doesn't have access to the page content.": {},
  "<a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/extensions/Drive-CDE/foreground.js\">foreground.js</a>: has access to the page content, but not to the events.": {},
  "👬 So, as you can imagine, both files have to communicate with each other in order to do what we want. As you can see in the code, they do it with a simple message system.": {},
  "👩‍🏫 In the repository you will find step-by-step comments on what does what. In total, there are less than 100 lines of relevant code: everything else is copied and pasted.": {},
  "### All toguether!": {},
  "🔥🔥🔥 This is how our 30 minutes CDE looks:": {},
  "## Conclusion": {},
  "🏆 Congratulations! You have just created your first CDE. It may not seem much, but think of all its functionalities: file storage, permissions and version control, 3d view, access to properties, 3d measurements, section planes...": {},
  "🚀🚀🚀 If we have done this in such a short time and using Google Drive, can you imagine what is possible to build with IFC.js and other technologies such as databases or servers? Don't worry, we'll be making tutorials on all that and more!": {},
  "Why IFC doesn't work": {},
  "ifc": {},
  "How is it so difficult to collaborate between software from different vendors?": {},
  "<img src={require(\"@site/static/img/blog/2021-12-01/viktoria-goda.jpg\").default} alt=\"PC image\"></img>": {},
  "🤜💥🤛 In the BIM market there are multiple tools from different vendors. This means that we often have to use IFC to get the data from one application to another, and this is where the problems of interoperability arise.": {},
  "🤒 Data is being lost in the transfer of these documents from software to software, some geometry may not be displaying as it should or federated models are becoming out of place are just some of the pitfalls that many of us have experienced on projects of all sizes.": {},
  "🤷‍♂️ We start to see and ask questions like: Why does IFC work so badly? Is open BIM technology unviable?": {},
  "<img src={require(\"@site/static/img/clipart/1.png\").default} alt=\"PC image\"></img>": {},
  "📃 Many argue that IFC is unworkable because it is a textual (meaning non-binary) and open format. However, the JSON format (a standard in the software industry) is also textual and works perfectly well.": {},
  "👨‍💻👨‍💻👨‍💻 Others say the problem is the schema itself. It is true that IFC is complex and the documentation is dry, but IFC.js started between 3 people in their spare time, implementing something that has extraordinary potential in less than a year.": {},
  "The problem seems to be that no large software company has a commercial interest in IFC. In reality, the ultimate goal of all of them is to convince the user to use their entire ecosystem. The IFC is, in many cases, a partially flawed solution for attempting to fill gaps in other tools that may not have had time to implement certain features or will not, since their business is not in line with those feature interests.": {},
  "👨‍💼 💼 In other words, how many customers would any of these large companies lose if they never improved their communication with IFC? Probably very little.": {},
  "💵💵💵 This creates the illusion that the IFC \"just doesn't work well\" while they continue to grow their ecosystem through tremendous developments or the acquisition of other companies.": {},
  "🙍‍♂️This is unfortunate because some of the industry players do have commercial interests in IFC. This includes engineering companies, architectural firms, construction companies, real estate companies, asset managers, etc.": {},
  "💸 We are the big losers in this situation. We all have to choose whether to subjugate ourselves to a closed, private ecosystem and depend on these companies, or waste time and money with all the problems that come with the current implementation of the IFC in their tools.": {},
  "🤝 Last week there was a round table discussion at the <a href=\"https://www.typsa.com/en/\">Typsa</a> offices where there was an <a href=\"https://teys.es/01-hackaton-typsa-ue4-actividades/\">open conversation</a> with representatives from <a href=\"https://www.ferrovial.com/\">Ferrovial</a> and <a href=\"https://www.fcc.es/\">FCC</a>, and we all agreed that maybe it is time for us to step up to the plate and develop in the world of BIM software to defend our own interests.": {},
  "<img src={require(\"@site/static/img/clipart/2.png\").default} alt=\"PC image\"></img>": {},
  "💪 You may think that we will never be able to catch up with the giants. But not only us. We are <a href=\"https://ifcjs.github.io/info/docs/Contribute\">many companies</a> joining our efforts in this project; companies of all kinds, of all sizes and from all areas are creating our own BIM tools without paying anything. Some of them are even getting into the market as new players.": {},
  "👩‍💻 Although developing BIM applications sounds daunting, it is actually much simpler than a video game, and nowadays it is already possible to create video games in a very short time with tools like Godot, Unreal or Unity. With tools like IFC.js creating BIM tools can be just as easy.": {},
  "💛 We are working hard to make this possible. We are convinced that this is the only way to improve the sector.": {},
  "Contribute": {},
  "## Work with us": {},
  "👩‍💻 IFC.js is developed by many companies and individuals around the globe. Do you want to help us with the code and join our consortium? This is the page you were looking for.": {},
  "If you are looking for a way to join our community and learn BIM and coding with us, check out our <a href=\"https://ifcjs.github.io/info/docs/Patreon\">patreon's page</a>!": {},
  "🤷‍♀️️ We all want the same thing: to create our own BIM applications and do business. However, if we all develop applications from scratch, we will never be able to compete with the industry giants.": {},
  "🤝 So we want to propose you to join forces.": {},
  "👨‍💼 It's easy: anyone can use IFC.js commercially without any limitations. However, each BIM application is different, and it is likely that as you build your application, you will create new cool BIM functionalities.": {},
  "🔥 Of course, you could implement those features in your closed source application... or you could implement them directly in IFC.js.": {},
  "### But wait, why on earth would I do that!?": {},
  "💪💪💪 It is pointless to compete with each other for the scraps of the big BIM software companies. However, if we join forces, we can make this a fair fight.": {},
  "🤖 Also, by doing so you would become a code sponsor. This grants you the following advantages:": {},
  "Your needs go FIRST": {},
  "We will implement everything you need from the library very quickly. Your needs will have top priority over the rest.": {},
  "Decision-making power": {},
  "Do you think the library should go in a particular direction? You can decide! You will have a say in the direction of the project.": {},
  "Early access to new functionalities": {},
  "You will be able to access new project functionalities before anyone else; a competitive advantage in your BIM app.": {},
  "Access to exclusive chat for maintainers": {},
  "You will have a direct line to us and you will be able to see how the project is cooked behind closed doors.": {},
  "### What does it cost me?": {},
  "👌 Absolutely nothing, not even time. Simply put, instead of reserving all of your BIM code for yourself, you can leave some of it open in IFC.js.": {},
  "It's simply a question of which repository you save your code to.": {},
  "### Are there really any companies participating?": {},
  "💼 Yes, and some of them are worth millions. If the programme is good enough for them, maybe it's good enough for your company.": {},
  "💰💰💰 These companies are creating their own BIM software from scratch, tailor-made and without paying anything at all.": {},
  "### Do you seriously think you can compete with the big BIM software companies?": {},
  "🌈 In 2020 nobody thought you could create BIM applications in 50 lines of code; now, thanks to IFC.js, it's trivial. In one year, 3 people from different countries and companies have achieved that in our spare time.": {},
  "🤝 Can you imagine how much we could achieve with your contribution?": {},
  "The thought that we cannot compete with them is a thought that only benefits them. Are we going to admit that we have already lost before we try?": {},
  "### But I know nothing about the project!": {},
  "👩‍🏫 Don't worry: if you want to participate, we will give top priority to your onboarding so that you can start using the library right away and help us with whatever you want.": {},
  "### Do I have to share all my code?": {},
  "🔑 No! You can share only those parts that you want and that can be interesting for the whole community. There is no minimum size to be a sponsor, so don't worry.": {},
  "### What if I am an educational institution?": {},
  "👩‍🏫 Great! If you decide to include IFC.js in your teaching programme, you can also be a sponsor. Contact us, and we will be at your disposal to train you, solve your and your students' doubts and help them to enter the world of Open BIM.": {},
  "### How do I get started?": {},
  "😊 <a href=\"https://discord.gg/FXfyR4XrKT\">Talk to us!</a> Tell us about your situation and your ideas and we will help you get started as soon as possible.": {},
  "Hello world": {},
  "## Introduction": {},
  "⚡ Creating a BIM application with IFC.js is very easy. You can find the complete project of the guide <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/helloworld\">here</a> and the deployed application <a href=\"https://ifcjs.github.io/hello-world/examples/web-ifc-three/helloworld/\">here</a>. You only need to have <a href=\"https://nodejs.org/en/\">Node.js</a> and any IDE installed to follow the steps below. Also, if you don't have any IFC files to follow along, you can get some <a href=\"https://github.com/IFCjs/test-ifc-files\">here</a>.": {},
  "Using IFC.js requires a basic knowledge of web development (HTML, CSS, JavaScript) and Three.js. If you have no previous experience with Three.js, you should probably look <a href=\"https://threejs.org/manual/\">here</a>.": {},
  "🐣 This minimal tutorial will be done with Vanilla JavaScript, without using frameworks like React, Vue, Angular, Svelte, etc. However, the same steps can be adapted and applied to any of these use cases.": {},
  "## Setting up the project": {},
  "### Install libraries": {},
  "👩‍🏫 The first thing to do is to create an empty folder and start a new npm project with the command <code>npm init</code>. This will generate a <code>package.json</code> file containing some data such as the project name, version, commands and dependencies. In addition, the following dependencies must be installed with npm:": {},
  "📝 The next step is to create an HTML file named <code>index.html</code> as the main document of the application. The HTML will have:": {},
  "A canvas element, used to render the Three.js scene.": {},
  "An input element, which will open IFC files from our computer to the application.": {},
  "A script referencing a file called <code>bundle.js</code>, which is the bundle of the app that we will produce with rollup.": {},
  "### Adding style": {},
  "🎨 The following CSS file will make the canvas full screen:": {},
  "### Bundling": {},
  "Next, we'll create the rollup configuration file. This file has to be called <code>rollup.config.js</code> and includes the reference to the plugins we have previously installed.": {},
  "Rollup?": {},
  "Rollup is a very popular bundling library. For instance, it's the bundler used by Three.js. Take a look at the <a href=\"https://rollupjs.org/guide/en/\">rollup docs</a> to learn more.": {},
  "🎯 Also, the <code>package.json</code> file needs to be modified to contain the commands to control rollup easily. In each command, you'll have to specify the relative path to your rollup configuration file. If we have installed everything correctly, we should see the same dependencies in this file (the version of the libraries may differ).": {},
  "<code>npm run build</code> will bundle the project and create a file called <code>bundle.js</code> in the root directory of the project.": {},
  "<code>npm run watch</code> will activate the <code>watch mode</code>, updating that file automatically every time we make changes to the code and save it.": {},
  "### WebAssembly": {},
  "📁 The next thing to do is to copy the <code>web-ifc.wasm</code> and <code>web-ifc-mt.wasm</code> files to a directory in your project. It can be found in <code>node\\_modules\\web-ifc</code> (or <code>node\\_modules\\three\\examples\\jsm\\loaders\\ifc</code> if you are only using Three's IFCLoader). We can copy them wherever we want; in this example, they will be copied to a folder called wasm in the root directory of the project.": {},
  "These files are necessary because they contain the compiled C++ logic of <a href=\"https://github.com/IFCjs/web-ifc\">web-ifc</a>, which is the parsing core to read and write IFC files with native speed.": {},
  "These files have to be served statically in your application. This might need different tweaks if you are using frameworks or libraries like React, Angular, Vue or Svelte.": {},
  "## Setting up a 3D scene": {},
  "Finally, we are going to create the JavaScript file to write the code for our application. This file can be located anywhere and have any name, but you must reflect this in the <code>rollup.config.js</code>.": {},
  "🧱 We are going to create a basic 3D scene using Three.js.": {},
  "🌏 To run the application locally we will need a local server. If you are using VS Code as IDE, one option is to install the <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">Live Server extension</a>, which allows us to open an instance of Google Chrome, run our web application and see the changes we make to the code in real-time.": {},
  "## Loading IFC files": {},
  "### Loading user's models": {},
  "🏠 Finally, we will use IFC.js to load IFC files. This can be done by instantiating the loader and creating an event for when the user uploads an IFC file to the HTML input element.": {},
  "🎣 Keep in mind that if you haven't saved the wasm files in the root of served files of the project, you'll need to specify its location with <code>setWasmPath</code>. For instance, if we had them stored in a folder called <code>wasm</code> contained in a folder called <code>static</code> in the root of the project, we would do the following:": {},
  "If you have done everything correctly, you should be able to see something similar to <a href=\"https://ifcjs.github.io/hello-world/examples/web-ifc-three/helloworld/\">this</a> in your local server. From here, the possibilities are endless.": {},
  "### Loading our models": {},
  "🤔 In the previous point we saw how to load BIM models directly, and that's great. What if we want to show our BIM models instead of allowing the user to upload theirs? This is very simple. Generally there are two possibilities:": {},
  "Having the IFC in the same application where you want to display it.": {},
  "Having to get it from an external storage service.": {},
  "🎩 In the first case, it is sufficient to reference the URL of the IFC file. That is, its relative path in the application. For example, if the IFC is in a folder called \"models\" in the root of the project, we could load that IFC when starting the application as follows:": {},
  "Getting a file from a remote storage service varies depending on the service used. However, the logic is the same: get the information, create a URL and pass it as an argument to the IFCLoader.": {},
  "🎉 Congratulations! You have just created your first IFC viewer. Go to the next pages of the docs to find out what else can you do with IFC.js.": {},
  "What else can I do with IFC.js?": {},
  "This is just the beginning. You can take a look at <a href=\"https://github.com/IFCjs/web-ifc-viewer\">web-ifc-viewer</a>, which includes tools for object selection, changing geometry appearance, section planes and much more. You can try it <a href=\"https://ifcjs.github.io/web-ifc-viewer/example/index\">here</a>.": {},
  "Introduction": {},
  "🎮 IFC.js is a JavaScript library to load, display and edit IFC models in the browser. Try the <a href=\"https://ifcjs.github.io/web-ifc-viewer/example/index\">live demo</a> with your IFC model and discover the power of IFC.js.": {},
  "## What is this library?": {},
  "### What is IFC?": {},
  "🏠 Architects and engineers used to draw building plans one by one. Not anymore! With BIM (Building Information Modelling), architects and engineers now create models of their projects. These models contains both the geometry and the information needed to get the project realized and should be the hub of all information throughout the project from cradle to grave.": {},
  "🔥 However, a building is so complex that there is no single application that can create these models in their entirety. Each application has a specific mission: modelling geometry, calculating structures, making energy simulations, creating project documents, and so on.": {},
  "👀 These tools come from multiple developers around the world and each one works in its format. In other words, the structural model created by a structural calculation application cannot be read by energy simulation software and vice versa. So how is it possible to create a model of a building from multiple tools?": {},
  "🎉 The answer is <a href=\"https://www.buildingsmart.org/standards/bsi-standards/industry-foundation-classes/\">IFC</a>, a format created by BuildingSMART to contain these 3D models of buildings. It is open, so anyone can read and write it. Yay!": {},
  "Thanks to IFC any developer can freely create BIM apps that can communicate with the apps of the big development companies in the construction sector.": {},
  "### The problem of IFC": {},
  "Anyone who wants to make a BIM application needs to read and write IFC files to be able to import and export information from other tools. Unfortunately, IFC is a format that is difficult to read and write. There are thousands of pages of documentation and creating and maintaining a self-made IFC parser is a huge task.": {},
  "Can you afford IFC?": {},
  "💸 This is something only companies with several developers working full time on this could afford. It doesn't sound that open anymore, does it?": {},
  "In case you are curious about how an IFC looks like inside, here you have an example. Imagine parsing hundreds of thousands of lines like these:": {},
  "💀 Even if you are willing to create a parser from scratch and maintain it with every change in the IFC schema, there are several non-trivial questions to tackle this problem. How to manage memory in very large files? How to implement geometric generation efficiently? What to do when an IFC has not been defined correctly?": {},
  "### IFC.js to the rescue": {},
  "It wouldn't make sense for all developers to have to implement their own IFC file reader and writer for their applications. Especially when we all want the same thing: importing and exporting geometry and data.": {},
  "IFC.js is a JavaScript library that makes it super easy to read and write IFC files.": {},
  "This allows developers of architecture and construction applications to work in IFC effortlessly and focus on the functionalities that add value to their business.": {},
  "## IFC.js in a nutshell": {},
  "IFC.js has two focuses:": {},
  "Geometry": {},
  "IFC.js can generate 3D scenes because it is compatible with 3D libraries such as Three.js or Babylon.js. This means that you can create 3D BIM tools right away.": {},
  "Data": {},
  "High-level access to all the properties associated with that geometry. This means easy access to data on the building components, their materials, thermal characteristics, structural strength, etc.": {},
  "Creating BIM applications with IFC.js is as easy as creating a webpage with JavaScript, HTML and CSS.": {},
  "## Who is this library for": {},
  "This library is for anyone who wants to develop BIM applications. This includes both developers creating applications for the construction industry and architects and other professionals who want to take advantage of the data in their IFC files.": {},
  "To use this library it is necessary to have a basic knowledge of JavaScript, HTML and CSS. This knowledge is beyond the scope of this documentation. You'll also need to use some 3D libraries to display the geometry of the IFC (Three.js or Babylon.js).": {},
  "😊 If you don't know where to start, we suggest you take a look <a href=\"https://threejs.org/manual/\">here</a> or just join the <a href=\"https://discord.gg/FXfyR4XrKT\">Discord Channel</a> and say hi.": {},
  "## Why is IFC.js different?": {},
  "IFC.js is a library written by and for JavaScript, arguably one of the most ubiquitous languages. This means that it is compatible with web browsers, desktop and mobile applications. JavaScript is also one of the easiest languages to learn and allows you to build user interfaces with HTML and CSS. In other words, creating BIM applications with IFC.js is as easy as creating a web page.": {},
  "### Multiplatform": {},
  "You can use IFC.js to create open BIM applications for any platform:": {},
  "<p>\n          Frontend web applications that read and write IFC files and display 3D without relying on server communication can be created using vanilla JavaScript or other tools such as React, Vue, Angular, Svelte, etc. That is, <i>with IFC.js we can turn any web browser into an open BIM app.</i>\n        </p>": {},
  "<p>\n          There are cases where the IFC file cannot be processed by the client. For example, a mobile device may not have the power to display several medium or large IFCs. In this case, it is possible to use IFC.js on the server via <a href=\"https://nodejs.org/en/\">Node.js</a> and send the Three.js scene already prepared to the client.\n        </p>": {},
  "<p>\n          Sometimes we don't want to create web applications, but native desktop applications that run on Windows, iOS and Linux. This is possible thanks to technologies like <a href=\"https://www.electronjs.org/\">Electron</a>. These native applications will be programmed in the same way as web applications; HTML, CSS, JavaScript, React, Vue, etc.\n        </p>": {},
  "<p>\n          IFC.js also supports <a href=\"https://reactnative.dev/\">React Native</a>, which maps WebGL code to native OpenGL. This means that you can create IFC-compatible Open BIM apps that run on Android and iOS easily.\n        </p>": {},
  "### Speed": {},
  "⚡️ If you have experience with web applications, you might be thinking that the weak point of a JavaScript-based IFC library is performance. However, the core of the library is developed in C++ combined with WebAssembly and <a href=\"https://emscripten.org/\">Emscripten</a>. It is designed specifically for maximum performance, allowing IFC.js to approach the speed and performance of desktop applications while running directly in the browser.": {},
  "### Features": {},
  "👓 IFC.js can read IFC files seamlessly.": {},
  "🏐 Generate 3D geometry that runs on 60 fps in a browser.": {},
  "🎨 Easily edit geometry appearance with the power of Three.js.": {},
  "🏠🏠🏠 Load multiple federated IFC models.": {},
  "📃 Retrieve IFC properties for reports and databases.": {},
  "✍ IFC.js also can edit and write IFC files from scratch.": {},
  "## Source code": {},
  "IFC.js is a large, multi-language library (C++, TypeScript JavaScript, etc). Having it in a single repository would be difficult and unwieldy. For that reason, the library exists in multiple repositories, where each one has its purpose. You can find them <a href=\"https://github.com/IFCjs\">here</a>.": {},
  "<p>The core of the library: an IFC parser and geometry generator written from scratch in C++ and compiled via Emscripten to WebAssembly. This repository encapsulates the complexity of reading IFC files and loading their data into memory.</p>": {},
  "<p>\n          This library adapts web-ifc to Three.js, generating an optimized 3D scene where users can directly interact with the IFC. This library is <a href=\"https://threejs.org/examples/webgl_loader_ifc.html\">the official Three.js IFC Loader</a>. Thanks to this adapter open BIM applications can be created with Three.js in just two lines of code.\n        </p>": {},
  "<p>\n          This is a browser-based <a href=\"https://ifcjs.github.io/web-ifc-viewer/example/index\">IFC viewer </a>\n          with many examples of what can be done with IFC.js. Scene navigation, material changes, element selection by clicking on them, section plans, etc. There is an example of all these functionalities in this repository, so it can be reused in open BIM applications out of the box.\n        </p>": {},
  "## Contribute": {},
  "Do you want to help us keep improving the world of Open BIM development with IFC.js? The library is big, so you will have to choose where you want to participate.": {},
  "I can't code, but I want to get in": {},
  "That's great! There are tons of things you can do aside from coding. Get into the <a href=\"https://discord.gg/FXfyR4XrKT\">Discord channel</a> to find out how.": {},
  "Parsing, geometry and C++": {},
  "If you are passionate about C++, WebAssembly, parsing or the nitty-gritty of IFC, you can help us with the fastest open source BIM parser in the industry: <a href=\"https://github.com/tomvandig/web-ifc\">web-ifc</a>.": {},
  "Three.js, geometry and Typescript": {},
  "If you are a Three.js developer, you can help us with <a href=\"https://github.com/IFCjs/web-ifc-three\">web-ifc-three</a>, which is <a href=\"https://threejs.org/examples/webgl_loader_ifc.html\">the official Three.js IFC Loader</a>.": {},
  "BIM tools, brainstorming and UX": {},
  "If you are interested in creating cool open BIM applications and you have great ideas for BIM tools or user interfaces, help us make <a href=\"https://github.com/IFCjs/web-ifc-viewer\">web-ifc-viewer</a> the best IFC viewer on the market.": {},
  "In any case, we encourage you to stop by the <a href=\"https://discord.gg/FXfyR4XrKT\">Discord channel</a>, say hello and tell us what's on your mind, so we can give you some guidance.": {},
  "Patreon": {},
  "## Join our community": {},
  "🌱 Do you want to join us in our journey and be an active part of our BIM & Development learning community? Then this is what you were looking for.": {},
  "If you want to join our development team instead, go to the <a href=\"https://ifcjs.github.io/info/docs/Contribute\">contribution page</a>.": {},
  "<img src={require(\"@site/static/img/clipart/coffee-mates.png\").default} alt=\"PC image\"></img>": {},
  "### As an individual": {},
  "🧑 Our patreon system is super simple: you give $5/month to the project to help IFC.js keep growing. However, we don't believe that open source should depend on altruistic donations. For this reason, all patreons gain access to the following:": {},
  "BIM programming courses for all levels": {},
  "We have BIM programming courses for all levels. Each course cost $100, but patreons can access them <a href=\"https://ifcjs.github.io/info/docs/Courses/Getting-started#for-patreons\">at just $25</a>.": {},
  "Access to the patreon community": {},
  "Patreons have access to an exclusive channel where they can ask us questions and make suggestions directly, as well as meet other active members and companies.": {},
  "Exclusive live webinars and streams": {},
  "Every week we do exclusive streams for patreons where we do tutorials, live coding sessions, interviews and showcase patreon community projects.": {},
  "Our help with your projects": {},
  "Patreons can ask us for help and advice on their projects. We develop BIM software every day and will share our experience so patreons can take their bim software to the next level.": {},
  "Prime access to hackathons": {},
  "We will organise hackathons with great prizes (in the form of cash and merchandising) to which only patrons will have access. We will broadcast these hackathons on our networks, do interviews and much more.": {},
  "Visibility from our networks": {},
  "Patreons and the BIM products they develop can use our networks to show their products and expand their network.": {},
  "Merch and perks": {},
  "Patreons will receive exclusive merchandising gifts exclusive IFC.js merchandising and gifts.": {},
  "### As a company": {},
  "👨‍💼 We do have a corporate patreon which is $50/month. It offers all the benefits mentioned above, plus:": {},
  "Consulting and prime support": {},
  "We will share our experience in creating professional BIM tools with your company and help you find the best solution.": {},
  "All courses for free + private webinars": {},
  "All official IFC.js courses free of charge for all your employees, as well as exclusive webinars / consulting sessions.": {},
  "Product promotion through our networks": {},
  "Your brand and BIM applications will be promoted in all our networks, including hackathons and stream interviews.": {},
  "Decission making power": {},
  "You will have some decision-making power over the bookshop's next steps to align them with your business.": {},
  "## Where does my money go?": {},
  "💛 We manage all money through <a href=\"https://opencollective.com/ifcjs\">Open Collective</a>. That means that anyone can see who has put how much money into the project.": {},
  "💵 Every time we want to use that money we will have to upload an invoice that will be published on the same page. That way, the money is as open as the code.": {},
  "## Who's in?": {},
  "IFC.js crash course": {},
  "## What's this about?": {},
  "👩‍💻 In the process of digitalization of our industry, programming is becoming increasingly important. Although it may seem an intimidating area, it is a lot of fun and offers a world of business possibilities.": {},
  "👩‍🏫 However, the world of programming is so vast that it is difficult to decide where to start. That is why we have created this course. Here you will learn how to program from scratch and the basics to create BIM applications with IFC.js.": {},
  "BIM programming will allow you to create your own tools, automate processes, create new businesses and qualify for better jobs.": {},
  "<img src={require(\"@site/static/img/clipart/crash-course.png\").default} alt=\"PC image\"></img>": {},
  "## Course content": {},
  "💻 IT fundamentals: internet and programming.": {},
  "🌳 HTML from zero to hero.": {},
  "💅 CSS: what you need to know.": {},
  "🐱 Git + npm crash course.": {},
  "🎥 Three.js foundation.": {},
  "🚀 Create a basic BIM viewer with web-ifc-three.": {},
  "🔥🚀 Create an advanced BIM app with web-ifc-viewer.": {},
  "🧠 Advanced IFC internals with web-ifc.": {},
  "## Requirements": {},
  "👌 Nothing! We will teach you to code your own BIM applications from scratch.": {},
  "Getting started": {},
  "## Learn BIM development with us": {},
  "🌱 Whether you know nothing about programming but you'd like to get started or you're an experienced developer but would like to take your BIM applications to the next level, we've got you covered!": {},
  "<img src={require(\"@site/static/img/clipart/lesson.png\").default} alt=\"PC image\"></img>": {},
  "🚀 We offer BIM programming courses for all levels. These courses include:": {},
  "📺 In-depth video lessons in english.": {},
  "👩‍💻 Scripts of all the theory.": {},
  "📋 All the code with comments.": {},
  "👩‍🏫 Answers from the teachers.": {},
  "🏆 Access to exclusive hackathons.": {},
  "🎁 Exclusive IFC.js merchandising.": {},
  "## Why aren't these courses free?": {},
  "🤝 IFC.js is, and always will be, free for everyone. However, in order to keep growing the project, we need funds to organize events, pay project expenses, reward the active community and much more. These courses are a way to get those funds.": {},
  "🌈 The money from the courses is reinvested entirely in the project. You can see how we manage the funds in a totally transparent way at <a href=\"https://opencollective.com/ifcjs\">Open Collective</a>.": {},
  "👨‍💻 Would you like us to spend this money somewhere else? You can join the project as <a href=\"https://ifcjs.github.io/info/docs/Contribute\">sponsor</a> or <a href=\"https://ifcjs.github.io/info/docs/Contribute\">patreon</a> and have a say in where we spend these funds.": {},
  "## How much do they cost?": {},
  "### For non-patreons": {},
  "🧑 Each course costs $100 for non-patreons. But that money doesn't go to us, it goes to the project. Therefore, to purchase a course you just need to <a href=\"https://opencollective.com/ifcjs\">make a donation of $100 in open collective</a> and send us the voucher, as well as the course (or courses) you want to get access to.": {},
  "### For patreons": {},
  "🧑🔥 Patreons can purchase courses at a great discount based on their patreon membership. Each uninterrupted month's stay in the patreon discounts all the courses by $15, up to a maximum of $25.": {},
  "🎉 In other words, a community member who commits to stay in the patreon for 6 months can purchase any course for $25.": {},
  "🏆 In addition, they will have exclusive content to which general users do not have access and the power to decide on the subject matter of the next courses.": {},
  "💛 Of course, patreons also have <a href=\"https://ifcjs.github.io/info/docs/Patreon\">all other advantages included in the patreon tier</a>.": {},
  "### For corporate patreons": {},
  "👨‍💼💼 Corporate patreons have free access to all courses for up to 50 employees, as well as live webinars from the creators of the library to their development teams, prime support and all other benefits granted by the <a href=\"https://ifcjs.github.io/info/docs/Patreon\">corporate patreon</a>.": {},
  "### Adaptative discount": {},
  "🤝 We are aware that the world is diverse and not all countries have the same purchasing power. However, we do not want to leave out people due to global economic reasons. If the average salary in your country is less than $1000, you can apply the adaptative discount.": {},
  "😊 This discount gives access to the courses and patreon tiers for a price equal to the proportional difference between the average salary in your country and $1000. For example, if the average salary is $800, you get a 20% discount. If the average salary is $400, the discount would be 60%.": {},
  "## How do I know they're good?": {},
  "🚀 No worries! The first lessons and notes are free and open to anyone, so you can try the quality of the rest of the material before paying anything.": {},
  "## How do I enroll?": {},
  "🚧 The courses are not ready yet! We are working really hard to make them happen as soon as possible. In the meantime, you can <a href=\"https://opencollective.com/ifcjs\">become a patreon</a> and get a great discount when they get out (as described above). We estimate that they will be released in March/April.": {},
  "👌 Once they are released, make a donation to our <a href=\"https://opencollective.com/ifcjs\">open-collective account</a> and we will give you access to everything.": {},
  "IFC for developers": {},
  "🐞 Our projects are becoming more and more complex, and that means that it is often not possible to carry them out with the tools of a single brand. Open BIM is the solution to this problem; it is increasingly present in our workflows, and IFC is its foundation.": {},
  "IFC allows the exchange of information between applications of different vendors, as well as accessing the information without depending on a single application / licensing policy.": {},
  "🌈 However, documentation is not easy and it is often difficult to discern what is really important to know from this scheme. In this course we are going to teach you all the knowledge we have needed to develop IFC.js.": {},
  "🌟 This is not a programming course, although at some point we might write some code to illustrate some of the concepts. Instead, this course aims to understand how the IFC schema works, what information does it contains and how is it structured.": {},
  "<img src={require(\"@site/static/img/clipart/ifc-course.png\").default} alt=\"PC image\"></img>": {},
  "🌱 IFC schema basics.": {},
  "🌍 IFC generic entities.": {},
  "🌳 IFC spatial structure and coordinate systems.": {},
  "🏠 IFC building elements: semantic objects.": {},
  "🧵 IFC geometry: placements and representations.": {},
  "📃 IFC properties: native, psets, qsets and others.": {},
  "📚 Common errors: IFC files in the wild.": {},
  "👌 Nothing! You will learn the IFC schema in practice from the ground up.": {},
  "Courses": {},
  "## Understanding IFC.js": {},
  "🐟🐠🐡 IFC.js is not just a library: it is an ecosystem of libraries and projects that make creating BIM tools trivial. There are two reasons for this modularity:": {},
  "To be able to use in our applications only what we need.": {},
  "To make the library more maintainable.": {},
  "It is important to understand which pieces make it up in order to know what to use in each case. IFC.js is essentially composed of 3 layers, each with a unique responsibility.": {},
  "web-ifc": {},
  "<div style={{ margin: \"1rem 0\" }}>An IFC file parser. It is able to read all information from an IFC, edit it and write new files. It has no 3d viewer, it only works with data.</div>": {},
  "<div style={{ margin: \"1rem 0\" }} />": {},
  "<div>\n  <b>When to use:</b>\n</div>": {},
  "<div style={{ margin: \"1rem 0\" }}>When you want to read or write IFC files without any viewer. This library gives full power over the data, but requires more understanding of the IFC schema to use it.</div>": {},
  "<div>\n  <b>Depends on: </b>-\n</div>": {},
  "web-ifc-three": {},
  "<div style={{ margin: \"1rem 0\" }}>A 3D BIM viewer. It allows to view and navigate the 3d model at 60 fps, select elements and easily read all the IFC data to display it to the end user. It is the official IFC Loader of three.js.</div>": {},
  "<div style={{ margin: \"1rem 0\" }}>When you want to make a BIM viewer for your application and you want to have full control over all implemented functionalities.</div>": {},
  "<div>\n  <b>Depends on: </b>web-ifc\n</div>": {},
  "web-ifc-viewer": {},
  "<div style={{ margin: \"1rem 0\" }}>A 3D BIM viewer with many tools and functionalities already implemented (section drawings, dimensions, etc.), allowing you to create BIM tools with very little effort.</div>": {},
  "<div style={{ margin: \"1rem 0\" }}>When you want to create a BIM viewer and you don't want to spend time implementing all the model navigation tools you would like to have.</div>": {},
  "<div>\n  <b>Depends on: </b>web-ifc-three\n</div>": {},
  "Guide": {},
  "## BIM is not only geometry...": {},
  "...but it has geometry.": {},
  "💪 <a href=\"&#x22;https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction&#x22;\">Web-ifc</a> is a very powerful tool capable of reading and writing IFCs with near-native speed. However, almost all BIM applications show the user a 3D view of the models they are working with. You could use <code>web-ifc</code> in any graphics engine, but we have already done that for you in web-ifc-three.": {},
  "🧶 <code>web-ifc-three</code> is a wrapper around <code>web-ifc</code> that reads all data from IFC files and transforms it into geometry that can be displayed and edited in any browser. You can install it with <code>npm i web-ifc-three</code> or <code>yarn add web-ifc-three</code>. Some cool facts about this module:": {},
  "🐣 It's super easy to use.": {},
  "🎩 It's the <a href=\"https://threejs.org/examples/webgl_loader_ifc.html\">official IFCLoader of Three.js</a>.": {},
  "🚀 It's very efficient, being able to display thousands of objects at 60 fps in a browser. It can display multiple models, change materials and filter items.": {},
  "🧠 It can get and traverse the spatial structure tree of multiple files. Also, it can access the properties of all the items, both clicking on them in the 3d view and with smart filters.": {},
  "🎓 In the following points, the API and its functionalities will be shown step by step. However, there are a couple of issues that are important to be clear about before using web-ifc-three.": {},
  "### Can I use <code>web-ifc</code> directly?": {},
  "With web-ifc you could build almost any BIM tool capable of reading and writing IFC. So why create a layer on top of it?": {},
  "🤷‍♀️ Because almost all BIM tools are 3D, and we think it would not make sense for all developers to implement a viewer from scratch. If you are only interested in the data, you may be better off using web-ifc directly.": {},
  "In addition, web-ifc-three makes working with IFCs much easier and safer even for the developer who has no previous experience with the format.": {},
  "Web-ifc is way more flexible but requires more knowledge of the IFC schema and a greater implementation effort.": {},
  "### Can I use the <code>THREE.IFCLoader</code> directly?": {},
  "👬 As mentioned above, <code>web-ifc-three</code> is the official IFCLoader of Three.js. That is, if you import the IFCLoader from Three.js, the code will be the same as the code you will find in the <code>web-ifc-three</code> repository.": {},
  "🚧 You might be tempted to import the <code>IFCLoader</code> from Three.js to avoid importing <code>web-ifc-three</code> in your project. This should work, but beware that Three.js is a very large library, and its update rate is much slower than that of IFC.js.": {},
  "Slight delay": {},
  "Three.js IFCLoader may not have the latest updates and the latest bugs we have fixed will remain unresolved in Three.js until the next version is released.": {},
  "To use the <code>THREE.IFCLoader</code> instead of the original <code>IFCLoader</code> you only have to change the import statement:": {},
  "Setup": {},
  "## 🌵 DRY documentation 🌵": {},
  "We don't want to <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">repeat ourselves</a>; not even in our documentation.": {},
  "👀 The setup for starting a project with web-ifc has already been seen in <a target=\"_self\" href=\"https://ifcjs.github.io/info/docs/Hello%20world\">Hello World</a>. If you have skipped that point, we recommend you to go and have a look at it. All tutorials will start from that scene.": {},
  "You are free to follow these tutorials using the Three.js IFCLoader instead.": {},
  "😊 If you get lost in any of the tutorials, don't worry! Take a look at the examples <a href=\"https://github.com/IFCjs/hello-world\">here</a> or come to the <a href=\"https://discord.gg/g7Uzn2KSwB\">Discord channel</a> and ask us directly. Also, let us know of any suggestions so we can improve these docs.": {},
  "Before going forward": {},
  "Basic knowledge of Three.js and web development is assumed. If you don't have this background, we recommend that you start <a href=\"https://threejs.org/manual/\">here</a> before jumping into IFC.js.": {},
  "🧩 web-ifc-three": {},
  "API": {},
  "## The list of awesome things you can do with web-ifc-three": {},
  "📃 All APIs are documented, so when you use any of the objects or methods seen in this documentation, you should see help in Intellisense, regardless of the IDE you are using. <a href=\"https://github.com/IFCjs/web-ifc-three/blob/main/web-ifc-three/src/IFC/components/IFCManager.ts\">Check it out!</a>": {},
  "👩‍🏫 However, we realise that reading intellisense or comments is not the most comfortable thing to do, so on this page we will make an overview of what the API can do. Everything will be covered in more detail in specific tutorials later on.": {},
  "## IfcLoader": {},
  "💎 The only object we will import from the library. It contains all the logic needed to work with IFC. You can use its <code>load()</code> and <code>loadAsync()</code> methods to load IFCs from a URL, <a href=\"https://threejs.org/docs/#api/en/loaders/Loader.load\">just like any other Three.js Loader</a>. For example, to load an IFC we can do the following:": {},
  "🏠🏠🏠 With <code>web-ifc-three</code> you can load multiple models in the scene. Many of the API operations are executed on a specified model. To express on which model we want to operate we have to give its <code>ModelID</code>.": {},
  "🔍 You can get the ID of a model through the property <code>modelID</code>.": {},
  "✌ There are two ways to access the API:": {},
  "Through the instances of <code>IfcModel</code> that the <code>IfcLoader</code> generates with <code>load</code> and <code>loadAsync</code>.": {},
  "Through <code>IfcLoader.IfcManager</code>.": {},
  "Both IfcModel instances and IfcLoader.IfcManager can be used interchangeably to access the API. There's one difference: when using IfcModel, the ModelID never has to be given as an argument (it's known implicitly).": {},
  "## 🧰 Setup": {},
  "### setWasmPath": {},
  "🧠 Specifies the location of the <code>web-ifc.wasm</code> and <code>web-ifc-mt.wasm</code> files. These files are the web-ifc file and is required to create any application with IFC.js. You can find them in <code>node\\_modules/web-ifc/</code>.": {},
  "🚧": {},
  "Careful with your tooling!": {},
  "If you use frameworks or libraries like React, Angular, Vue or Svelte it is possible that the root path of the project doesn't correspond to the root path of the served application. You will have to check in <a href=\"https://github.com/IFCjs/examples\">each case</a> how the paths of the statically served files are managed.": {},
  "#### Arguments:": {},
  "<code>path</code> Route of <code>web-ifc.wasm</code>.": {},
  "#### Example:": {},
  "If <code>web-ifc.wasm</code> is in dist/wasmDir:": {},
  "### setupThreeMeshBVH": {},
  "⚡⚡⚡ This method allows object picking to be much faster, especially for very large models with heavy geometry. This method actually allows IFC.js to use the Garrett Johnson's amazing <a href=\"https://github.com/gkjohnson/three-mesh-bvh\">library </a>. u can install it with <code>npm i three-mesh-bvh</code> or <code>yarn add three-mesh-bvh</code>.": {},
  "☝ Using this method not mandatory, but if you want to be able to select objects in medium / large IFC models at 60 fps, it's necessary.": {},
  "<code>computeBoundsTree</code> Pre-made BufferGeometry extension function that builds a new BVH, assigns it to boundsTree, and applies the new index buffer to the geometry. - <a href=\"https://github.com/gkjohnson/three-mesh-bvh#computeboundstree\">source</a>.": {},
  "<code>disposeBoundsTree</code> BufferGeometry extension function that disposes of the BVH. - <a href=\"https://github.com/gkjohnson/three-mesh-bvh#disposeboundstree\">source</a>.": {},
  "<code>acceleratedRaycast</code> Accelerated raycast function with the same signature as THREE.Mesh.raycast. Uses the BVH for raycasting if it's available otherwise it falls back to the built-in approach. - <a href=\"https://github.com/gkjohnson/three-mesh-bvh#acceleratedraycast\">source</a>.": {},
  "### setOnProgress": {},
  "⏳ Sets a callback function that is called every 10% of IFC loaded. This way, you can display a loading bar to show your user how the loading is going.": {},
  "<code>onProgress</code>: Callback function that is called every 10%. That function must have one argument that that receives an object with two properties: <code>loaded</code> (number of objects loaded) and <code>total</code> (number of objects in the file).": {},
  "### applyWebIfcConfig": {},
  "🎹🎹🎹 Applies a configuration for <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction\">web-ifc</a>, which is the parser that this library uses internally.": {},
  "<code>settings</code>: An object containing the following fields:": {},
  "<code>COORDINATE\\_TO\\_ORIGIN: boolean</code>: Wether to bring the model to the center of the scene. Useful for geolocated models.": {},
  "<code>USE\\_FAST\\_BOOLS: boolean</code>: Wether to use a faster (and less precise) boolean logic.": {},
  "<code>BOOL\\_ABORT\\_THRESHOLD?: number</code>: The limit to the boolean operation computation.": {},
  "<code>CIRCLE\\_SEGMENTS\\_LOW?: number</code>: The resolution for low segments curves.": {},
  "<code>CIRCLE\\_SEGMENTS\\_MEDIUM?: number</code>: The resolution for medium segments curves (e.g. IfcSweptDiskSolid).": {},
  "<code>CIRCLE\\_SEGMENTS\\_HIGH?: number</code>: The resolution for high segments curves (e.g. IfcCircle).": {},
  "If a file is geolocated and we want to bring it to the origin of the scene:": {},
  "### useWebworkers": {},
  "👷‍♀️👷‍♀️👷‍♀️ Toggles the web worker that contains the parsing logic. The rest of the API remains the same, but all the logic will happen in another thread of the machine, so the app will never be blocked by heavy operations.": {},
  "🚧 You need to copy the file <code>IFCWorker.js</code> to your project and pass the relative path as a second argument.": {},
  "<code>active</code>: Wether to use web workers or not.": {},
  "<code>path</code>: Relative path to the worker file. Necessary if <code>active = true</code>.": {},
  "If the file <code>IFCWorker.js</code> is in a folder called: <code>files</code>:": {},
  "### useJSONData": {},
  "🚀 Uses JSON property data instead of the WASM data, which consumes much less memory. Only use this in the following scenarios:": {},
  "If you don't need to access the properties of the IFC": {},
  "If you will provide the properties as JSON. You can get the JSON from an IFC file in advance following <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc/ifc-to-json/node\">this example</a>.": {},
  "<code>useJSON</code>: Wether to use JSON data or not.": {},
  "### addModelJSONData": {},
  "📦📦📦 Adds the properties of a model as JSON data. If you are using web workers, use <code>loadJsonDataFromWorker()</code> instead to avoid overheads.": {},
  "<code>modelID</code>: ID of the IFC model.": {},
  "<code>data</code>: data as an object where the keys are the expressIDs and the values the properties. In addition, each value has the properties <code>expressID</code> (id of the item) and <code>type</code> (IFC class of the item).": {},
  "### loadJsonDataFromWorker": {},
  "📦📦📦 Loads the data of an IFC model from a JSON file directly from a web worker. If you are not using web workers, use <code>addModelJSONData()</code> instead.": {},
  "<code>path</code>: the path to the JSON file relative to the web worker file.": {},
  "## 🔍 Getters": {},
  "### getExpressId": {},
  "💳 Gets the Express ID of an IFC element from a face index.": {},
  "Why a face index?": {},
  "Because when we select an object in 3d space with the mouse we get the index of that face. We usually want the ID of the object where that face belongs to in order to highlight it, isolate it or get all its properties.": {},
  "<code>geometry</code> <a href=\"https://threejs.org/docs/#api/en/core/BufferGeometry\">Geometry</a> of the model you clicked on with the mouse.": {},
  "<code>faceIndex</code> Index of the face intersected with the <a href=\"https://threejs.org/docs/#api/en/core/Raycaster\">raycaster</a>. If you are not familiar with the raycaster, don't worry; we'll cover this in detail in the tutorial about picking.": {},
  "### getIfcType": {},
  "🎸🪕🎻 Gets the IFC type of the specified element (e.g. IFCWALL).": {},
  "Elements in IFC always have an associated type: IfcWall, IfcSlab, IfcWindow, IfcDoor, etc.": {},
  "<code>modelID</code> ID of the IFC model.": {},
  "<code>id</code> Express ID of the item whose properties to obtain. You can get this either with <code>getExpressId</code> (if you are picking an object in the 3d view) or traversing the model with <code>getAllItemsOfType</code> or <code>getSpatialStructure</code>.": {},
  "### getAllItemsOfType": {},
  "🎸🎸🎸 Returns all objects of the specified IFC type (e.g. all walls, all floors, all windows, etc.) of a specific model. It can return an array of <code>expressIDs</code>, or (if <code>verbose = true</code>) an array of objects containing the properties of the items found.": {},
  "<code>type</code> IFC type of the elements you want to get. You can import these types directly from <code>web-ifc</code> (see example below).": {},
  "<code>verbose</code> If true, gets the properties of all the items found. Be careful, as this can be a slow operation in bigger models.": {},
  "### getItemProperties": {},
  "📕🔍 Gets the native properties of the given element. In the IFC schema there are two types of properties: direct and indirect. How to obtain the indirect properties (psets, qsets and type properties) will be discussed later.": {},
  "All methods related to properties return an array of objects where the keys are the name of the properties and the values are their values.": {},
  "<code>recursive</code> If true, gets the properties of all the referenced elements recursively. Be careful, as this can be a slow operation in bigger models.": {},
  "### getTypeProperties": {},
  "📘🔍 Gets the type properties of the given element.": {},
  "### getPropertySets": {},
  "📗🔍 Gets the property sets and quantity sets of the given element.": {},
  "Property sets?": {},
  "Native and type properties are those that are predefined by the IFC schema: they always contain the same information. Property sets, on the other hand, are arbitrary and can be defined by the user.": {},
  "### getMaterialsProperties": {},
  "📒🔍 Gets the material information of the given element.": {},
  "### getSpatialStructure": {},
  "🔗🔗🔗 Gets the spatial structure of the project.": {},
  "The <a href=\"https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm\">spatial structure </a>\nis the hierarchical structure that organizes every IFC project (all physical items are referenced to an element of the spatial structure).": {},
  "## 🧱 Subsets": {},
  "### getSubset": {},
  "🧱🔍 Gets the mesh of the subset with the specified <a href=\"https://threejs.org/docs/#api/en/materials/Material\">material</a>. If no material is given, this returns the subset with the original materials.": {},
  "Geometric subsets are extracts of the geometry of the model. For example, you could extract a subset with all the IfcDoors and IfcWindows that meet a certain condition and highlight or export them.": {},
  "<code>material</code> (optional) Material assigned to the subset (if any).": {},
  "<code>customID</code> (optional) Optional custom name of the subset (if any).": {},
  "### createSubset": {},
  "🧱✨ Creates a new geometric subset.": {},
  "<code>config</code> A configuration object with the following options:": {},
  "### removeSubset": {},
  "🧱💣 Removes the specified geometric subset.": {},
  "<code>customID</code> (optional) Optional custom name to give to the subset. This allows to create multiple subsets with the same material.": {},
  "### removeFromSubset": {},
  "🧱💥🤏 Removes the specified items from the specified geometric subset.": {},
  "<code>ids</code> Express IDs of the items to remove from the subset.": {},
  "👩‍🏫 As discussed in the <a href=\"../Getting%20started.mdx\">Getting Started</a> guide - web-ifc-three viewer is a 3D BIM viewer with many tools and functionalities already implemented (section drawings, dimensions, etc.), allowing you to create BIM tools with very little effort.\\\nIt is suggested to use this when you want to create a BIM viewer and you don't want to spend time implementing all the model navigation tools you would like to have.": {},
  "🧱 The <a href=\"../../Hello%20world.mdx\">Hello World</a> guide talks about the basic set-up of a ifc.js project. But with web-ifc-viewer the set-up becomes even more simpler because most of the set-up is already done for you.": {},
  "The first thing to do is to create an empty folder and <a href=\"https://docs.npmjs.com/cli/v8/commands/npm-init\">start a new npm project</a> with the command <code>npm init</code>. This will generate a package.json file containing some data such as the project name, version, commands and dependencies": {},
  "### Installing libraries": {},
  "🎯 The next step is to install the dependencies necessary for this project. Below are the commands that install the respective dependencies:": {},
  "three.js?": {},
  "Note that installing web-ifc-three also installs the three.js library which allows you to customize the viewer as required in the next steps": {},
  "### HTML, CSS, Bundling & WASM files": {},
  "📝🎨🧻📁 You can follow the steps in the <a href=\"../../Hello%20world.mdx\">Hello World</a> guide to create the <code>index.html</code>, <code>styles.css</code>, <code>rollup.config.js</code> files and also copy the necessary <code>.wasm</code> files from <code>node\\_modules\\web-ifc</code> (or <code>node\\_modules\\three\\examples\\jsm\\loaders\\ifc</code> folder.": {},
  "minor change in index.html": {},
  "Note that there is one minor change in index.html file you need to make - compared to the \"Hello World\" guide. You don't need to create a <code>\\<canvas></code> element manually as it will b created by web-ifc-viewer for you. But you do need to add the container element in which the viewer is supposed to be placed in.": {},
  "Replace <code>\\<canvas id=\"three-canvas\">\\</canvas></code> from your <code>index.html</code> file with <code>\\<div id=\"viewer-container\">\\</div></code>": {},
  "To run the application locally we will need a local server. If you are using VS Code as IDE, one option is to install the <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">Live Server extension</a>, which allows us to open an instance of Google Chrome, run our web application and see the changes we make to the code in real-time.": {},
  "## Setting up 3D-Scene (web-ifc-viewer)": {},
  "Once you have the <code>index.html</code>, <code>styles.css</code> & the <code>.wasm</code> files in place, you can then move on to adding the javascript(<code>index.js</code>) which will load the viewer. This file can be located anywhere and have any name, but you must reflect this in the <code>rollup.config.js</code>.": {},
  "🎥 Below code is where we are setting up a basic threejs scene using <code>IfcViewerAPI()</code> method of <code>web-ifc-viewer</code>. Note that this code is just the viewer - In the next step we will add the functionality to load models into this viewer.": {},
  "🏠 Finally, we will use IFC.js to load IFC files by allowing the user to choose a local file and using the <code>IfcViewerAPI()</code> we instantiated above to load the model.": {},
  "🏠 In order to load a ifc file from a server, you need to use the <code>loadIfcUrl()</code> to convert the model path url into something that the web-ifc-viewer can read. Below is a function <code>loadIfc(url)</code> that is used to do that.": {},
  "🚩If you have done everything correctly, you should be able to see something similar to <a href=\"https://ifcjs.github.io/hello-world/examples/web-ifc-viewer/hello-world/\">this</a> in your local server.": {},
  "🎉 Congratulations! You have just created your first IFC viewer. Go to the next pages of the docs to find out what else can you do with IFC Viewer.": {},
  "This is just the beginning. You can take a look at <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-viewer\">web-ifc-viewer examples</a>, which includes tools for floor plans, changing geometry visibility, floor plans and much more. You can try it <a href=\"https://ifcjs.github.io/web-ifc-viewer/example/index\">here</a>.": {},
  "⏩ In the next set of articles, we will talk about how to enable additional in-build features in web-ifc-viewer.": {},
  "🧩 web-ifc-viewer": {},
  "## Full IFC control at native speed": {},
  "🌎 It is often thought that web applications are not as powerful as desktop applications. Relatively recently, however, <a href=\"https://webassembly.org/\">WebAssembly</a> appeared on the scene.": {},
  "WebAssembly is a technology that allows the use of languages like C++ to create web applications.": {},
  "🔥🔥🔥 This means we can have the best of both worlds: the flexibility of a web application and the full performance of a machine. And this is what web-ifc is all about. You can install it with <code>npm i web-ifc</code> or <code>yarn add web-ifc</code> and it has the following features:": {},
  "⚡ It is as fast as native applications thanks to its parsing core, written from scratch in C++.": {},
  "🚀 It can be run directly on the client or as a backend service. Bring BIM to all parts of your system!": {},
  "📚 It can read 100% of the IFC data, including IFC types. This allows data to be easily extracted, structured, traversed and entered into databases.": {},
  "🌈 It can edit data and write entire IFCs from scratch. Create apps that communicate with the large software vendors.": {},
  "In the following points, the API and its functionalities will be shown step by step. However, there are a some issues that are important to be clear about before using <code>web-ifc</code>.": {},
  "### But wait, I don't know C++!": {},
  "👌 Don't worry! Although the parser is written in C++, it is compiled in a file called <code>web-ifc.wasm</code> that browsers understand automatically. Just include this file in your application and you will have access to the full API with native speed with JavaScript or TypeScript. How cool is that?": {},
  "### What is the .wasm file for?": {},
  "🧠 The web-ifc.wasm file contains the IFC parsing core. It is pre-compiled and hyper-efficient; unlike JavaScript, which has to be compiled line by line, this file can be sent directly to the CPU and executed without prior interpretation.": {},
  "📦 You can find this file in the <code>node-modules/web-ifc/web-ifc.wasm</code> folder. You will need to serve this file with your application (if frontend) or have it on your server (if backend).": {},
  "Beware: when you update the web-ifc version in your application, you will also have to update (copy) the corresponding version of web-ifc.wasm .": {},
  "### When should I use web-ifc?": {},
  "🦅 <code>Web-ifc</code> is the lightest and most flexible module of IFC.js. However, this flexibility also means that you have to know what you are doing, and therefore know the internals of the IFC schema relatively well.": {},
  "☝ Moreover, web-ifc does not implement a 3d viewer. This is an advantage, because it means that you can get IFC geometry without relying on a particular 3d renderer in a more agile way.": {},
  "If you want to see 3d geometry easily, you will either have to implement it yourself, or use web-ifc-three or web-ifc-viewer.": {},
  "🧩 web-ifc": {},
  "🚀 Multithreading": {},
  "🥶🥶🥶 Everything seen so far is very cool, but we have a problem: when we load a very large model the application freezes for some seconds. This problem also happens when we want to extract many properties from the model. Is there any way to avoid this?": {},
  "🔥 Of course, IFC.js has foreseen this situation and has implemented multithreading. This means that heavy operations will be carried out in a parallel process that will not block the application, which will be updated asynchronously when the process concludes.": {},
  "👌 This sounds complicated, and it is. But don't worry: we've got it all set up so you can have this in your BIM applications in a couple of lines of code.": {},
  "You can find the full example of this tutorial <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/multithreading\">here</a>.": {},
  "## How to do it": {},
  "### Set up the webworker": {},
  "👩‍🏫 In order to enable multithreading, the webworker must be configured. But what is a webworker? The webworker is the mechanism that web browsers have to be able to work with multithreading. But don't worry if you haven't heard of them before, you don't need them to use multithreading in IFC.js.": {},
  "📦📦📦 If you work with <code>npm</code>, <code>yarn</code> or another package manager in your project there should be a folder called <code>node\\_modules</code>, with all the folders of the libraries your project is using. In <code>node\\_modules/web-ifc-three</code> you will find the two files needed to use webworkers: <code>IFCWorker.js</code> and <code>IFCWorker.js.map</code>.": {},
  "You have to copy these two files to a directory in your project that will be served with the final application. This varies depending on the technology you are using (vanilla JS, React, Angular, etc). You can use the same directory you are using for the wasm files.": {},
  "🌍 Then you have to specify where this file is located, in the same way as with the wasm file. This can be done like this:": {},
  "🥶⛔ And, voi lá! Believe it or not, you have already enabled multithreading in your project. If you now try to load a file in your application or try to get many properties at once, you will see that the application does not freeze.": {},
  "Note that if you activate the webworker, the path to the wasm files must be relative to the webworker.": {},
  "🤖❓📚 Keep in mind that the version of the webworker has to match the version of the library you are using. This means that if you update the version of <code>web-ifc-three</code> in the future, you'll need to copy these files again. You can automate this using a command-line library to copy files like <code>cpy</code>.": {},
  "### Loading progress": {},
  "🔥 Using multithreading in your BIM application has numerous advantages. The most immediate is that we can now show the user the loading progress of a model. First we'll add a simple HTML message to show the progress:": {},
  "✨✨✨ Next we are going to link this HTML element to the model load event. This can be easily done with the <code>setOnProgress()</code> method. Let's also apply some basic math to convert progress into a percentage.": {},
  "🌈 If you have done everything correctly, we should be able to see the following viewer. If you try to load an IFC model, not only you will see that the loading process does not block the 3D view, but the html text shows the loading progress in real time.": {},
  "## Next steps": {},
  "🎉🎉🎉 Congratulations! You can now create multithreaded BIM applications that never freeze.": {},
  "😎 You are now familiar with some advanced tools of IFC.js, but there's much more to learn. In later tutorials we will see how to not only read, but also edit and create IFC files.": {},
  "👓 Hiding": {},
  "👩‍🏫 With what we have seen in other tutorials we already know how to select elements in 3D, access their properties and highlight them using subsets, which are parts of the whole model.": {},
  "🚪🧱 However, in many BIM applications it is also possible to hide and isolate elements. A common use case is to hide all elements that do not comply with a certain filter or show only those objects belonging to a floor of the building.": {},
  "🍰 Of course, this is a piece of cake using IFC.js. In this example we are going to create filters by category, so that the user can show or hide items using checkboxes.": {},
  "As with the other tutorials, you can find the full example <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/hiding\">here</a>.": {},
  "### Get subsets of categories": {},
  "👩‍🏫 Visibility in IFC.js is based on subset operations. This allows complex visualisations to be created with minimal memory usage. The first thing we are going to do is to define which IFC categories we are going to allow the user to show or hide.": {},
  "📋📋📋 To save memory, categories in IFC.js are defined as numeric constants. So let's create an object that maps the name of those constants to their numeric value, and a function to retrieve them:": {},
  "🏠⏩🚪 Now let's create a couple of functions to get all the IDs of the elements belonging to a category and create a subset with those IDs.": {},
  "Remember that many IFC.js functions are asynchronous, so we're going to use async and await.": {},
  "👩‍🏫 You can also use <code>removeFromSubset()</code> to remove a single item from a subset (e.g. hide a single item). If you combine that with <code>createSubset()</code> with <code>removePrevious = false</code>, you'll have full control of what is added to which subset and its visibility.": {},
  "### Set up GUI": {},
  "💻🧑 We will now create a simple GUI to allow the user to control which categories are visible or invisible. We are going to create a checkbox for each category of the BIM model we are working with.": {},
  "💅 This can easily be done with a little HTML and CSS:": {},
  "### Bind GUI with visibility": {},
  "✨ Now it only remains to link the click event of each checkbox with the visibility of the corresponding category, so that when the checkbox is activated the category becomes visible and when it is deactivated it disappears.": {},
  "🎨👨‍🎨 Here it is worth noting that to make the code more concise we have given each checkbox an ID with the same name as the category it links to.": {},
  "😎 And here is the result:": {},
  "🎉🎉🎉 Congratulations! Now you know how to control the visibility of elements using any filter.": {},
  "This would be the same if we want to filter with other properties (e.g. the floor they belong to using the spatial structure tree, seen in the properties section). Just make sure you get the IDs of the elements you want to filter.": {},
  "👩‍🏫 However, <code>web-ifc-three</code> has even more functionality. For example, what if we want to open and close the viewer? Let's take a look at it next.": {},
  "✨ Subsets": {},
  "🎩 In almost all BIM applications, elements are highlighted when the user moves the mouse over them or selects them. IFC.js is no exception, and in this tutorial we will see how to achieve this.": {},
  "👩‍🏫 Previously{\" \"}": {},
  "we have seen how to obtain the ID of an object on which we cast a ray with the <a href=\"https://threejs.org/docs/#api/en/core/Raycaster\">Raycaster</a>. Now that we have those IDs, it's possible to highlight those elements using geometric subsets.": {},
  "Geometric subsets?": {},
  "Geometric subsets are any group of items in the model. For example: all doors, all ground floor elements or all elements fulfilling a given condition.": {},
  "### Import dependencies": {},
  "⚽ We'll need a <a href=\"https://threejs.org/docs/#api/en/materials/Material\">material</a> to highlight the items. You can choose any material you like; in this example we'll use a <a href=\"https://threejs.org/docs/#api/en/materials/MeshLambertMaterial\">MeshLambertmaterial</a>, which we'll import from Three's core library.": {},
  "We'll use the Raycaster, so you'll also need <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/Tutorials/Picking/#import-threejs-dependencies\" target=\"_self\">those dependencies</a>, as well as <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/Tutorials/Picking/#import-three-mesh-bvh-optional\" target=\"_self\">three-mesh-bvh</a> if we want optimal performance.": {},
  "### Highlight material": {},
  "🌀 The first thing is to create the highlight material.Play with the configuration and make the material look nice! Pro tip: you can use <code>depthTest=false</code> so that the object is visible from any viewpoint.": {},
  "☝ Note that geometric subsets are uniquely identified by their material.": {},
  "If you create a subset with a wall using a material A, and then try to create a subset of another wall with the same material A, the second wall will be added to the subset of the first one.": {},
  "If you create a subset with a wall using material A, and then try to create another subset of the same wall using material B, you will have created two independent subsets.": {},
  "You can have two separate subsets with the same appearance using two instances of the same material.": {},
  "### Single subset": {},
  "🐭 We can create a highlight effect when the user hovers with <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/api#createsubset\" target=\"_self\">createSubset</a>.": {},
  "👀 There are several interesting things to look out for:": {},
  "The implementation of <code>cast()</code> was shown <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/Tutorials/Picking/#how-to-do-it\" target=\"_self\">previously</a>.": {},
  "The variable <code>currentModel</code> is used to store a reference of the selected model; this way, when the user is not hovering an object, we are able to remove the previous subset with <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/api#removesubset\" target=\"_self\">removeSubset</a>.": {},
  "The IDs of the items whose subset to create have to be given as an array (even if it's a single ID).": {},
  "### Multiple subsets": {},
  "💅💅💅 Working with multiple subsets is as easy as working with a single subset. We just need to create a new material, create a new subset with the same function and associate the creation of that subset to an event.": {},
  "In this example we are going to bind it to double click to simulate the effect of highlighting objects when they are selected.": {},
  "### Extracting geometry": {},
  "👩‍🏫 If you create a geometry subset and do not specify a highlight material, the subset will have the original materials.": {},
  "This would allow, for example, to create a geometric subset with all the ground floor elements of the BIM model and hide the rest.": {},
  "🌚 In the next example we will apply a transparent material to a copy of loaded IFC model and create a subset with the original materials when the mouse hovers over an item. For this we will use almost the same code as before.": {},
  "🎉🎉🎉 Congratulations! You should now be able to highlight elements and extract geometry from the BIM model. Good job!": {},
  "📃 However, don't be so quick to claim victory. We haven't talked about the \"I\" in BIM yet, and that's even more important than the geometry. That's what the next lesson is for.": {},
  "🧠 Memory": {},
  "📭📫 On many occasions we will want to create applications that are able to open and close BIM viewers. Although this may seem obvious, there is a problem: memory management.": {},
  "🤔 Now many will be scratching their heads, since memory management is not a common issue in web applications. JavaScript and other modern languages have automatic memory management / garbage collector, so the programmer doesn't have to worry about freeing up objects and arrays.": {},
  "✍🤖❓ However, when working with Three.js, data going to the graphics card (e.g. buffers) is not affected by this automatic memory management.": {},
  "🤕 That means that if we close a viewer made with Three.js (with or without IFC.js), we will create a 💦 memory leak 💦. That is to say, we are blocking a part of the user's RAM memory. If the leak becomes too big, the application will become slower and slower and may crash.": {},
  "You can find more information about this topic <a href=\"https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects\">here</a>.": {},
  "🚀 This becomes especially critical if we are creating a SPA (Single Page Application), for example, using frameworks and libraries such as React or Angular\\*\\*. In these cases the web application is never reloaded, and the memory leak accumulates.": {},
  "Fortunately, IFC.js has taken this into account and allows you to release the used memory very easily. Let's see how. 👇": {},
  "You can find the full example of this tutorial <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc-three/memory\">here</a>.": {},
  "### Monitoring the memory": {},
  "👀 The first question you probably have if you haven't worked much with Three.js optimized scenes is how to see how much memory your application consumes. Otherwise, it is impossible to detect memory leaks.": {},
  "🌍 There are several ways to do this. The first is to use the developer tools of the browser you are using. For example, in Google Chrome there is a section called \"Memory\" where you can take snapshots and see how much memory the current tab is consuming.": {},
  "🤖 However, a more convenient way is to use the library <a href=\"https://github.com/mrdoob/stats.js/\">stats.js</a>. This library allows to monitor the performance and memory of a Three.js application. It can be installed with <code>npm i stats.js</code> and can be used as follows:": {},
  "📋 This will bring up the scene statistics during execution. By clicking on them we can toggle between performance and memory usage of the app.": {},
  "### Dispose memory": {},
  "✌ Now let's create a function that removes all the memory consumed by IFC.js. There are 2 things to keep in mind:": {},
  "If we have specified the path to the WASM files previously, we will have to do it again in the new instance of web-ifc-three.": {},
  "This one is important: if we have stored a reference to the loaded IFC models in an array, an object or a class, we have to delete them manually. Otherwise, the memory will not be freed.": {},
  "### Set up simple GUI": {},
  "💅 Finally, we are going to create an HTML button and link it to the function we created earlier.": {},
  "😎 This is how the application looks like:": {},
  "Try loading a model and releasing the memory: you'll see it go back to normal. Beware that it can take some seconds, as the browser garbage collector takes some time. Alternatively, you can manually apply the garbage collector using the browser's developer tools.": {},
  "### SPA": {},
  "🌈 It is very common to create SPA or Single Page Applications because they are more efficient and require less communication with the backend. Examples of tools to make these applications are React, Angular, Vue, etc.": {},
  "👶👴 In many cases these tools manage the lifecycle of the application components automatically. For example, when the user closes the 3d view, the HTML element containing the view is automatically destroyed.": {},
  "🚧🚧🚧 To avoid memory leaks, it will be necessary to free the application memory as seen in this tutorial each time the component containing the 3D view is destroyed. In many cases there are hooks or similar mechanisms to execute this logic automatically each time the component is destroyed.": {},
  "🎉🎉🎉 Congratulations! You now know how to manage the memory of the BIM applications you create with IFC.js, so your applications will be 100% free of memory leaks.": {},
  "💪 Next we are going to look at some advanced model loading tools, such as multithreading and load process event.": {},
  "🤏 Picking": {},
  "🚶‍♀️ So far we have only loaded IFC models into the scene. That's already great, but it would be even better to be able to interact with that model, and that's precisely what we're going to do.": {},
  "### Import Three.js dependencies": {},
  "⚡⚡⚡ Before you can do things with objects, you need to be able to select them. This can be easily achieved with the <a href=\"https://threejs.org/docs/#api/en/core/Raycaster\">Three.js Raycaster</a>, which can be imported from <code>three</code>'s core library. In addition, we will import a <a href=\"https://threejs.org/docs/#api/en/math/Vector2\">Vector2</a> object to store the mouse position in the scene.": {},
  "The Raycaster allows you to shoot \"beams\" that hit objects in the scene and return their information.": {},
  "### Import three-mesh-bvh (optional)": {},
  "👩‍🚀🚀 In addition, we will import the <a href=\"https://github.com/gkjohnson/three-mesh-bvh\">three-mesh-bvh library</a> to make the selection of objects much more optimal. This can be installed with <code>npm i three-mesh-bvh</code>. Don't worry, you don't have to learn how to use that library. Just give us these library objects and IFC.js will take care of the rest.": {},
  "### Store reference of IFC models": {},
  "🏠🏠🏠 Before doing anything else, it is necessary to save a reference to the IFC models in the scene in order to select them. To do this, we just need to create an array where we store the models we load:": {},
  "🐁 Next we will create an instance of the Raycaster and the mouse position vector. To optimise the application, the Raycaster will only retrieve information from the first object it encounters.": {},
  "Now we need a function for the Raycaster to cast rays, calculating the position of the mouse on the screen. Note that:": {},
  "The threeCanvas object is the HTML <code>\\<canvas></code> element where the Three.js scene is being rendered. A reference to it can be retrieved with <code>getElementByID()</code>.": {},
  "It is necessary to specify which objects the beam collides with. In this case, it will only collide with the loaded IFC models, i.e. if there are more objects in the scene, it will ignore them.": {},
  "👓 We have a function that fires a ray and returns the object it collides with, but we are not doing anything with that object. Let's create a second function that gets the index of the face the ray hit and logs in the console the Express ID of the object it belongs to.": {},
  "The Raycaster always returns an array of objects, even if <i>raycaster.firstHitOnly = true;</i>. In this case, the array will only contain one object that can be extracted with <i>\\[0]</i>.": {},
  "Finally, all that remains is to associate that function with an event (in this case it's a double click).": {},
  "If you have done everything right and double click on an item, you will see its Express ID in the console (you can access the console by pressing F12 or by inspecting the page).": {},
  "🎉🎉🎉 Congratulations! You now know how to get the ID of an object by clicking on it. Now we can do many things using that ID.": {},
  "✨ However, it would be nice if the user could see graphically that the object has been selected. For that, let's go to the next point, where we will learn how to highlight elements.": {},
  "📃 Properties": {},
  "🧬🧬🧬️ Although virtually all BIM models have geometry, almost everyone agrees that what is really important is the \"I\" in BIM, i.e. Information. IFC.js can traverse any IFC file from top to bottom at native speed and with almost no code.": {},
  "💾 This not only makes it possible to create web applications that read information from IFC files directly on the client side, but also to transfer that information into relational or non-relational databases and process it on the backend.": {},
  "IFC.js can read IFC files by IDs, by spatial tree and by filtered search.": {},
  "📚 There are several types of properties in the IFC scheme, each with a specific purpose, and IFC.js can get all of them. Some of the most common are:": {},
  "Native properties": {},
  "Specific to each IFC class.": {},
  "Type properties": {},
  "Describe properties of all elements of the same type (e.g. all envelope walls of a particular type).": {},
  "Material properties": {},
  "Describes all the materials that make up the layers of that element.": {},
  "Property sets": {},
  "Arbitrary sets of user-defined properties. There may be multiple sets of properties associated with one or more elements. Each property set contains an arbitrary group of properties related to each other.": {},
  "Quantity sets": {},
  "Sets of properties describing the dimensions of the elements to which they refer. Although it would also be possible to infer element dimensions implicitly from the geometry definition, this explicit description makes it much easier to create applications that measure IFC models.": {},
  "🚴‍♂️ But enough theory! Let's get down to work.": {},
  "### Hello properties": {},
  "👩‍🏫 The basic way to extract properties from an IFC is from the ID of an element. In many cases, when the user selects an element, we will want to get its direct and indirect properties.": {},
  "<a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/Tutorials/Picking/\" target=\"_self\">\n  Previous tutorials{\" \"}\n</a>": {},
  "have shown how to get that ID easily.": {},
  "☝ Now that we have that ID, how hard it is to get the properties of an element? You only need to add one line of code to what we saw in the <a href=\"https://ifcjs.github.io/info/docs/Guide/web-ifc-three/Tutorials/Picking/\" target=\"_self\"> picking tutorial </a> to be able to see the properties of the selected element when double clicking.": {},
  "🤨 But what are these properties?": {},
  "They are native properties, that is, the basic properties inherent to each ifc element type. The properties are given as a JavaScript object, so they are super easy to traverse.": {},
  "🤔 Why do some properties have numbers as values?": {},
  "These are not numbers, but express IDs! This means that you can use <code>getItemProperties()</code> again using that ID, and you'll get the properties of that referenced element.": {},
  "That is how IFC works: each element has properties, and each property can be the reference to other element. So you can basically traverse the whole IFC navigating through references.": {},
  "😑 References? But I want all the information directly!": {},
  "Don't worry, we got you covered! You can use an optional third parameter of <code>getItemProperties()</code>, which is a boolean that is false by default. If you set it to true, we will get all referenced elements recursively and give you everything nicely packed in a single JavaScript object.": {},
  "Nonetheless, we usually recommend avoiding this in order to avoid runtime overheads. Much better is to use <code>getItemProperties()</code> only for those IDs you need when you need them.": {},
  "🙄 How can I get other types of properties?": {},
  "The IFC.js API has other similar methods for all other property types: <code>getTypeProperties()</code>, <code>getMaterialProperties()</code> and <code>getPropertySets()</code>. This last method fetches both property sets and quantity sets.": {},
  "😨 Is": {},
  " the only way to traverse the IFC?": {},
  "Not at all! We'll see how to traverse the whole spatial structure next.": {},
  "### Traverse the IFC": {},
  "🔥 You can now browse the IFC information from the ID of an element, and you also know how to get the ID by clicking on objects in the scene. However, we know that this is not enough.": {},
  "What if you want to get the properties of elements that have no geometric representation (e.g. <code>IfcSite</code>)?": {},
  "What if you want to traverse the entire spatial structure of the IFC?": {},
  "🌈 Of course, all this is really easy with the IFC.js API.": {},
  "### Spatial tree": {},
  "🌳🌲🌴 As you may know, all IFCs have a general structure called Spatial Element Structure (we'll refer to it as <code>spatial tree</code>). It is composed of elements that define the relative position of all products (physical objects) in the project.": {},
  "The spatial structure generally consists of IfcProject, IfcSite, IfcBuilding, IfcBuildingStorey and IfcSpace.": {},
  "You can get the spatial structure of the project simply calling <code>getSpatialStructure()</code>, where the only parameter is the <code>modelID</code>. This method will return the whole spatial structure of the project as a JavaScript object.": {},
  "🚧 Does this means that you get all the properties of all the products of the project? Nope, because that would be computationally expensive. Instead, you get a tree of items with the following information:": {},
  "👩‍🏫 Notice that you only get the type (e.g. <code>IfcWall</code>) and the express ID. If you want to get the properties of an element, you'll have to traverse the tree and call the abovementioned property getter methods over all the IDs.": {},
  "If your goal is to display properties to users, it's generally better to only get the properties when the user requests it (e. g. clicks on a specific item in your GUI).": {},
  "For instance, if you request the spatial structure of a project, you might get something like this:": {},
  "### Get items by type": {},
  "👩‍🏫 Sometimes you'll want to retrieve all elements of a certain type (e.g. all <code>IfcWall</code> instances in the project). In these cases it is not useful to select elements by clicking on them or to get the spatial tree of the project.": {},
  "🎸🪕🎻 That's what the <code>getAllItemsOfType</code> method is for. Using it is really easy, and you can import the types directly from <code>web-ifc</code>. For instance, to get the properties of all the <code>IfcSlab</code> instances of the project, you can do the following:": {},
  "🎉🎉🎉 Congratulations! You should now be able to traverse any IFC and extract the properties you are looking for.": {},
  "🐱‍👤 However, what can we do with these properties? One possible application can be found in the following tutorial, where we will see how to hide and isolate elements.": {},
  "🎓 Tutorials": {},
  "Hello World": {},
  "## 🚧👷‍♀️ Under construction 👷‍♂️🚧": {},
  "Thanks for your interest in IFC.js!": {},
  "We are building this section of the documentation right now. In the meantime, you can join the <a href=\"https://discord.gg/FXfyR4XrKT\">Discord channel</a> and ask us any questions you need to implement IFC.js or to join the project.": {},
  "🧊 One of the coolest thing you can do is traverse the IFC file and fetch the relevant information, web-ifc provides us with the capability to read and write IFC file from within the browser, In this tutorial we will Read Properties from IFC file and Output it on Frontend.": {},
  "💾 This tutorial will help us to get the Analysis of IFC without a viewer😎.": {},
  "👉 You can check out the final result deployed <a href=\"https://ifcjs.github.io/hello-world/examples/web-ifc/ifc-to-json/properties/index.html\">here</a> and the full code <a href=\"https://github.com/ifcjs/hello-world/tree/main/examples/web-ifc/ifc-to-json/properties\">here</a>.": {},
  "### Setting up": {},
  "Imports and Global Variables": {},
  "Reading File": {},
  "We will read file and call <a href=\"https://github.com/IFCjs/hello-world/blob/main/examples/web-ifc/ifc-to-json/properties/app.js#:~:text=async%20function%20LoadFile(ifcAsText)\"><code>LoadFileData()</code></a> and send IFC data as Text": {},
  "Creating a method which will be called for getting Element Properties": {},
  "All the code for getting Element Data goes inside it": {},
  "### Getting Element Data": {},
  "GetAllLines()": {},
  "GetLines()": {},
  "🔢 Getting Element Data by ElementID": {},
  "🤨 But what is Element?": {},
  "Every Entity can be considered as an Element which has it's own unique ElementID, by using the above code we can get various values that are contained in that Element Data. Few values that you can get and what we will output on Frontend are": {},
  "<a href=\"https://technical.buildingsmart.org/resources/ifcimplementationguidance/ifc-guid/\">GUID</a> : Globally Unique Identifier for the Element": {},
  "Name - Name given to that Element": {},
  "IfcType - It refers to the type of Element it is e.g. <code>IFCWALL</code>,<code>IFCWINDOW</code>": {},
  "<a href=\"https://standards.buildingsmart.org/IFC/RELEASE/IFC2x3/TC1/HTML/ifckernel/lexical/ifctypeobject.htm#:~:text=IfcTypeObject&text=Definition%20from%20buildingSMART%3A%20The%20object,%2D%20specific%20%2D%20occurrence%20modeling%20paradigm.\">IfcObjectType</a> - Defines the specific information about a type": {},
  "<a href=\"https://www.visualarq.com/features/collaboration/ifc/#:~:text=Tag%20feature.-,The%20IFC%20Tag,-The%20IFC%20tag\">Tag</a> - The IFC tag feature lets you assign IFC properties to the objects when they are exported to IFC": {},
  "and many more.": {},
  "🤖 Element Data": {},
  "Please ignore <code>createRowInTable()</code> as of now, it will be covered in Frontend Section": {},
  "Just remember 1st parameter is the Label and the 2nd parameter is the respected value.": {},
  "### Element Properties": {},
  "Now that we have Element Data, we need to get the properties of that Element, the way IFC is structured we can't directly get Properties like we got Element Data, we have to fetch Lines which are Property Data and filter it according to the ExpressID we want.": {},
  "Feels too hectic? Don't worry, web-ifc with it's Native Speed gets us the data easily.": {},
  "1️⃣ Getting All Lines with Type": {},
  "We will get all <code>Lines</code> that has relation as properties with Elements i.e <code>IFCRELDEFINESBYPROPERTIES</code>.": {},
  "2️⃣ Get ElementID of Property Sets": {},
  "After getting the lines we will fetch the ElementID from those lines, next we use those ElementID to get the Element Data same like what we have done above.": {},
  "Next, we will go through the Element Data and find out the RelatedObjects and if those RelatedObjects contain the ElementID for which we are trying to find properties we save them in a local array🥳": {},
  "⚖️ The heavy lifting has been done, now we will repeat few of the steps.": {},
  "3️⃣ Getting Property Sets from their ID": {},
  "Yes you are right, getting Element Data using Element IDs!, now we will use the IDs from propSetIds and Get Data.": {},
  "Then we will check whether they have properties i.e. check if they contain <a href=\"https://standards.buildingsmart.org/IFC/RELEASE/IFC2x3/TC1/HTML/ifcpropertyresource/lexical/ifcpropertysinglevalue.htm\">Nominal Values</a>": {},
  "If you want you can store Property Sets but in our case we will show them on Frontend, so no need to store.": {},
  "Your complete code until now should look like <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc/ifc-to-json/properties/app.js\">this</a>": {},
  "### FrontEnd": {},
  "We are using this example as a <a href=\"https://github.com/IFCjs/hello-world/tree/main/examples/web-ifc/ifc-to-json/frontend\">base </a>\nand will be making additions to it": {},
  "🤖 Method to Create Rows": {},
  "We will now use the <code>table</code> variable we had created globally while doing the setup": {},
  "🔳 Your HTML Code inside": {},
  " should like this": {},
  "🎨 Now Styling": {},
  "Containers:": {},
  "Input Field and button:": {},
  "Table and Table Row:": {},
  "🎉 Congratulations! You should now be able to traverse any IFC and extract the properties you are looking for.": {},
  "You can use the web-ifc APIs to get Material Data as well and many more to query the lines according to your need.": {},
  "BIM toolkit for JavaScript.": {},
  "Tagline of the welcome page.": {},
  "Get started": {},
  "The welcome button of the documentation. Brings the user to the Introduction page.": {},
  "Native speed": {},
  "The IFC.js parsing engine is based on WebAssembly and C++, and is specifically designed to read data from large files as fast as a desktop application.": {},
  "Multiplatform": {},
  "IFC.js is compatible with any platform: web application (frontend and backend), desktop applications (Windows, Mac and Linux) and mobile applications (Android and iOS).": {},
  "Lightweight": {},
  "An open BIM application created with IFC.js can weigh less than 1 MB. This library allows the creation of web and native applications with almost no impact on the final weight of the application.": {},
  "Source": {},
  "The source of an image of the blog": {},
  "Page Not Found": {},
  "The title of the 404 page": {},
  "We could not find what you were looking for.": {},
  "The first paragraph of the 404 page": {},
  "Please contact the owner of the site that linked you to the original URL and let them know their link is broken.": {},
  "The 2nd paragraph of the 404 page": {},
  "Close": {},
  "The ARIA label for close button of announcement bar": {},
  "Blog list page navigation": {},
  "The ARIA label for the blog pagination": {},
  "Newer Entries": {},
  "The label used to navigate to the newer blog posts page (previous page)": {},
  "Older Entries": {},
  "The label used to navigate to the older blog posts page (next page)": {},
  "One min read|{readingTime} min read": {},
  "Pluralized label for \"{readingTime} min read\". Use as much plural forms (separated by \"|\") as your language support (see https://www.unicode.org/cldr/cldr-aux/charts/34/supplemental/language_plural_rules.html)": {},
  "Tags:": {},
  "The label alongside a tag list": {},
  "Read More": {},
  "The label used in blog post item excerpts to link to full blog posts": {},
  "Blog post page navigation": {},
  "The ARIA label for the blog posts pagination": {},
  "Newer Post": {},
  "The blog post button label to navigate to the newer/previous post": {},
  "Older Post": {},
  "The blog post button label to navigate to the older/next post": {},
  "Tags": {},
  "The title of the tag list page": {},
  "One post|{count} posts": {},
  "Pluralized label for \"{count} posts\". Use as much plural forms (separated by \"|\") as your language support (see https://www.unicode.org/cldr/cldr-aux/charts/34/supplemental/language_plural_rules.html)": {},
  "{nPosts} tagged with \"{tagName}\"": {},
  "The title of the page for a blog tag": {},
  "View All Tags": {},
  "The label of the link targeting the tag list page": {},
  "Copy code to clipboard": {},
  "The ARIA label for copy code blocks button": {},
  "Copied": {},
  "The copied button label on code blocks": {},
  "Copy": {},
  "The copy button label on code blocks": {},
  "Expand sidebar": {},
  "The ARIA label and title attribute for expand button of doc sidebar": {},
  "Docs pages navigation": {},
  "The ARIA label for the docs pagination": {},
  "Previous": {},
  "The label used to navigate to the previous doc": {},
  "Next": {},
  "The label used to navigate to the next doc": {},
  "Collapse sidebar": {},
  "The title attribute for collapse button of doc sidebar": {},
  "Close menu": {},
  "The ARIA label for close button of mobile doc sidebar": {},
  "Open menu": {},
  "The ARIA label for open button of mobile doc sidebar": {},
  "This is unreleased documentation for {siteTitle} {versionLabel} version.": {},
  "The label used to tell the user that he's browsing an unreleased doc version": {},
  "This is documentation for {siteTitle} {versionLabel}, which is no longer actively maintained.": {},
  "The label used to tell the user that he's browsing an unmaintained doc version": {},
  "For up-to-date documentation, see the {latestVersionLink} ({versionLabel}).": {},
  "The label userd to tell the user that he's browsing an unmaintained doc version": {},
  "latest version": {},
  "The label used for the latest version suggestion link label": {},
  "Edit this page": {},
  "The link label to edit the current page": {},
  "Direct link to heading": {},
  "Title for link to heading": {},
  " on {date}": {},
  "The words used to describe on which date a page has been last updated": {},
  " by {user}": {},
  "The words used to describe by who the page has been last updated": {},
  "Last updated{atDate}{byUser}": {},
  "The sentence used to display when a page has been last updated, and by who": {},
  "Skip to main content": {},
  "The skip to content label used for accessibility, allowing to rapidly navigate to main content with keyboard tab/enter navigation": {},
  "One document found|{count} documents found": {},
  "Pluralized label for \"{count} documents found\". Use as much plural forms (separated by \"|\") as your language support (see https://www.unicode.org/cldr/cldr-aux/charts/34/supplemental/language_plural_rules.html)": {},
  "Search results for \"{query}\"": {},
  "The search page title for non-empty query": {},
  "Search the documentation": {},
  "The search page title for empty query": {},
  "Type your search here": {},
  "The placeholder for search page input": {},
  "Search": {},
  "The ARIA label for search page input": {},
  "Search by Algolia": {},
  "The ARIA label for Algolia mention": {},
  "No results were found": {},
  "The paragraph for empty search result": {},
  "Fetching new results...": {},
  "The paragraph for fetching new search results": {},
  "The ARIA label and placeholder for search button": {},
  "The label for version current": {},
  "The label for category Courses in sidebar tutorialSidebar": {},
  "The label for category Guide in sidebar tutorialSidebar": {},
  "The label for category 🧩 web-ifc in sidebar tutorialSidebar": {},
  "The label for category 🎓 Tutorials in sidebar tutorialSidebar": {},
  "The label for category 🧩 web-ifc-three in sidebar tutorialSidebar": {},
  "The label for category 🧩 web-ifc-viewer in sidebar tutorialSidebar": {},
  "Docs": {},
  "The title of the footer links column with title=Docs in the footer": {},
  "Community": {},
  "The title of the footer links column with title=Community in the footer": {},
  "More": {},
  "The title of the footer links column with title=More in the footer": {},
  "Tutorial": {},
  "The label of footer link with label=Tutorial linking to /docs/introduction": {},
  "Discord": {},
  "The label of footer link with label=Discord linking to https://discord.gg/FXfyR4XrKT": {},
  "Funding": {},
  "The label of footer link with label=Funding linking to https://opencollective.com/ifcjs": {},
  "Twitter": {},
  "The label of footer link with label=Twitter linking to https://twitter.com/ifc_js": {},
  "Twitch": {},
  "The label of footer link with label=Twitch linking to https://www.twitch.tv/ifc_js/about": {},
  "Blog": {},
  "The label of footer link with label=Blog linking to /blog": {},
  "GitHub": {},
  "The label of footer link with label=GitHub linking to https://github.com/IFCjs": {},
  "Roadmap": {},
  "The label of footer link with label=Roadmap linking to https://trello.com/b/d5frRnSe/roadmap": {},
  "Copyright © 2022 IFC.js.": {},
  "The footer copyright": {},
  "IFC.js": {},
  "The title in the navbar": {},
  "Navbar item with label Docs": {},
  "Navbar item with label Blog": {},
  "Navbar item with label Community": {},
  "Navbar item with label GitHub": {}
}
